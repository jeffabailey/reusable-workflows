name: Hugo Deploy

on:
  workflow_call:
    inputs:
      website_repository:
        required: true
        type: string
      s3_bucket_name:
        required: true
        type: string
      cloudfront_distribution_id:
        required: true
        type: string
      site_meta_url:
        required: true
        type: string
      debug:
        required: false
        type: boolean
        default: false
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      access_token:
        required: true
jobs:
  deploywebsite:
    name: "Deploy Website"
    runs-on: ubuntu-latest
    env:
      working-directory: ./gatsby
      node-version: "15.10.0"
    strategy:
      matrix:
        node-version: [15.x]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: us-east-1

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.website_repository }}
          token: ${{ secrets.access_token }}


      # https://github.com/tcort/markdown-link-check
      # - name: Check Links
      #   uses: gaurav-nelson/github-action-markdown-link-check@v1

      # https://github.com/xom9ikk/dotenv
      - name: Simple Dotenv
        uses: xom9ikk/dotenv@v1.0.2

      - name: Set Default Git Branch
        run: |
          git config --global init.defaultBranch master
 
      # https://github.com/peaceiris/actions-hugo
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2.6.0
        with:
          hugo-version: 'latest'
          extended: true

      - name: Cache Hugo build
        uses: actions/cache@v3
        with:
          path: ./hugo/resources/_gen
          key: ${{ runner.os }}-hugo-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/hugo.toml') }}-${{ hashFiles('content/**') }}
          restore-keys: |
            ${{ runner.os }}-hugo-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/hugo.toml') }}-
            ${{ runner.os }}-hugo-

      - name: Build
        timeout-minutes: 15
        run: |
          cd ./hugo
          if [ "${{ inputs.debug }}" = "true" ]; then
            echo "üêõ Debug mode enabled - running Hugo with verbose output"
            hugo --minify --gc --verbose
          else
            hugo --minify --gc
          fi

      # Only files if needed: $ find . -depth -type f | xargs -n 1 rename 's/(.*)\/([^\/]*)/$1\/\L$2/' {} \;


      - name: S3 Sync
        run: |
          if [ "${{ inputs.debug }}" = "true" ]; then
            echo "üêõ Debug mode enabled - running S3 sync with verbose output"
            aws s3 sync ./hugo/public s3://${{ inputs.s3_bucket_name }} --delete --acl bucket-owner-full-control --acl public-read --cache-control max-age=31536000,public --debug
          else
            aws s3 sync ./hugo/public s3://${{ inputs.s3_bucket_name }} --delete --acl bucket-owner-full-control --acl public-read --cache-control max-age=31536000,public
          fi

      # - name: S3 Lowercase
      #   run: for i in $( aws s3 ls --recursive s3://${{ inputs.s3_bucket_name }} | grep [A-Z] | awk '{print $4}' ); do aws s3 mv s3://${{ inputs.s3_bucket_name }}/$i s3://${{ inputs.s3_bucket_name }}/`echo $i | tr 'A-Z' 'a-z'`; done

      - name: Cloudfront Invalidate
        run: |
          if [ "${{ inputs.debug }}" = "true" ]; then
            echo "üêõ Debug mode enabled - running CloudFront invalidation with verbose output"
            aws cloudfront create-invalidation --distribution-id ${{ inputs.cloudfront_distribution_id }} --paths "/*" --debug
          else
            aws cloudfront create-invalidation --distribution-id ${{ inputs.cloudfront_distribution_id }} --paths "/*"
          fi

      - name: Audit URLs using Lighthouse
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ inputs.site_meta_url }}
          budgetPath: ./budget.json # test performance budgets
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true # upload lighthouse report to the temporary

      - name: Cleanup
        uses: rtCamp/action-cleanup@master          
